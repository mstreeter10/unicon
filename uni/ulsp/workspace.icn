# -------------------------------------------------------------------------
# ---------------------- Workspace Class ----------------------------------
# -------------------------------------------------------------------------
#
# Description: 
#    -Contains all items related to a particular opened workspace file.
#    -This includes: 
#       -The uri of the file
#       -The contents of the file (synchronized contents coming from client - updating in textDocument/didChange)
#       -links used in the file.
#       -imports used in the file.
#       -Classes (and their methods, attributes, etc.) available from links/imports
#       -Procedures available from links/imports
#       -Classes (and their methods, attributes, etc.) created within the file.
#       -Procedures created within the file.
#       -Objects instantiated within the file.
#

package ulsp


link regexp
link io
import json
import UniDoc

import lang
import util
import parser

class Workspace(
   uri,
   lsp_database,
   temp_file,
   #   file_contents,
   links,
   imports,
   objects,
   internal_procedures,
   internal_classes,
   linked_procedures,
   linked_classes,
   imported_procedures,
   imported_classes,
   m_uni_file
   )

   method updateWorkspace()
      setLinks()
      setImports()
      setInternalProcedures()
      setLinkedProcedures()
      setImportedProcedures()
      setInternalClasses()
      setLinkedClasses()
      setImportedClasses()
      setObjects()
   end

   method setFile()
      local temp_idoc
      
      temp_idoc := UniAll()
      if \temp_file then temp_idoc.setSourcePath(temp_file) else temp_idoc.setSourcePath(uri)
      if \temp_file then temp_idoc.processFile(temp_file) else temp_idoc.processFile(uri)

      files := temp_idoc.getAllFiles()
      m_uni_file := files[1]
   end

   method getFile()
      return m_uni_file
   end

# -------------------------------------------------------------------------------------------------
# ---------------- Temp file (create, update) -----------------------------------------------------
# -------------------------------------------------------------------------------------------------
   
    method createTempFile()
       temp_file := tempname()
       temp_file := temp_file || "_temp.icn"
    end

    method updateTempFile(file_contents)
       f := open(temp_file, "w") | fail
       writes(f, file_contents)        
       close(f)
    end

    method deleteTempFile()
       remove(temp_file)
    end

# -------------------------------------------------------------------------------------------------
# ---------------- Links (get, set, update) -------------------------------------------------------
# -------------------------------------------------------------------------------------------------


    method setLinks()
       links := []
       links_w_ext := getFile().getLinkNames()
       every link_w_ext := !links_w_ext do {
          temp := reverse(link_w_ext)
          temp ? {
             move(4)
             _link := tab(0)
             _link := reverse(_link)
          }
          every _package := key(lsp_database.package_db) do {
            if member(lsp_database.package_db[_package]["files"], _link) then
               put(links, _link)
          }
       }
    end

    method getLinks()
       return links
    end

# -------------------------------------------------------------------------------------------------
# ---------------- Imports (get, set, update) -----------------------------------------------------
# -------------------------------------------------------------------------------------------------

    method setImports()    	
       imports := []
         every _import := !getFile().getImportNames() do {
            if member(lsp_database.package_db, _import) then
               put(imports, _import)
         }
    end

    method getImports()
       return imports
    end

# -------------------------------------------------------------------------------------------------
# ---------------- Internal Procedures (get, set, update) -----------------------------------------
# -------------------------------------------------------------------------------------------------

    method setInternalProcedures()
       internal_procedures := table()
       every _procedure := getFile().getProcedures().get() do {
         internal_procedures[_procedure.getName()] := table()

         internal_procedures[_procedure.getName()]["params"] := []
         every _param := _procedure.getParams().get() do {
            paramName := _param.getName()
            paramType := _param.getTypeValue()
            paramDef := _param.getDefValue()
            put(internal_procedures[_procedure.getName()]["params"], table(
               "name", paramName, 
               "type", paramType, 
               "default", paramDef))
         }
       }
    end


    method getInternalProcedures()
       return internal_procedures
    end

# -------------------------------------------------------------------------------------------------
# ---------------- Linked Procedures (get, set, update) -------------------------------------------
# -------------------------------------------------------------------------------------------------

    method setLinkedProcedures()
       linked_procedures := table()
       every _link := !links do {
          every _key := key(lsp_database.package_db["(main)"]["files"][_link]["procedures"]) do {
             linked_procedures[_key] := lsp_database.package_db["(main)"]["files"][_link]["procedures"][_key]
             }
          }
    end

    method getLinkedProcedures()
       return linked_procedures
    end

# -------------------------------------------------------------------------------------------------
# ---------------- Imported Procedures (get, set, update) -----------------------------------------
# -------------------------------------------------------------------------------------------------

    method setImportedProcedures()
       imported_procedures := table()
         every _import := !imports do {
          every file_in_pack := !lsp_database.package_db[_import]["files"] do {
             every _key := key(file_in_pack["procedures"]) do {
                imported_procedures[_key] := file_in_pack["procedures"][_key]
                }
             }
          }
    end

    method getImportedProcedures()
       return imported_procedures
    end

# -------------------------------------------------------------------------------------------------
# ---------------- Internal Classes (get, set, update) --------------------------------------------
# -------------------------------------------------------------------------------------------------

    method setInternalClasses()
       internal_classes := table()
       every _class := getFile().getClasses().get() do {
          internal_classes[_class.getName()] := table()
            
          internal_classes[_class.getName()]["methods"] := table()
          every _method := _class.getMethods().get() do {
             internal_classes[_class.getName()]["methods"][_method.getName()] := table()

             internal_classes[_class.getName()]["methods"][_method.getName()]["params"] := []     
             every _param := _method.getParams().get() do {
               paramName := _param.getName()
               paramType := _param.getTypeValue()
               paramDef := _param.getDefValue()
               put(internal_classes[_class.getName()]["methods"][_method.getName()]["params"], table(
                  "name", paramName, 
                  "type", paramType, 
                  "default", paramDef))
               }
             }
          internal_classes[_class.getName()]["attributes"] := []
          every _attribute := _class.getParams().get() do {
             put(internal_classes[_class.getName()]["attributes"], _attribute.getName())
             }
          }
    end

    method getInternalClasses()
       return internal_classes
    end

# -------------------------------------------------------------------------------------------------
# ---------------- Linked Classes (get, set, update) ----------------------------------------------
# -------------------------------------------------------------------------------------------------
   
    method setLinkedClasses()
       linked_classes := table()
       every _link := !links do {
          every _key := key(lsp_database.package_db["(main)"]["files"][_link]["classes"]) do {
             linked_classes[_key] := lsp_database.package_db["(main)"]["files"][_link]["classes"][_key]
             }
          }
    end

    method getLinkedClasses()
        return linked_classes
    end

# -------------------------------------------------------------------------------------------------
# ---------------- Imported Classes (get, set, update) --------------------------------------------
# -------------------------------------------------------------------------------------------------

    method setImportedClasses()
       imported_classes := table()
         every _import := !imports do {
            every file_in_pack := !lsp_database.package_db[_import]["files"] do {
               every _key := key(file_in_pack["classes"]) do {
                  imported_classes[_key] := file_in_pack["classes"][_key]
               }
            }
         }
    end

    method getImportedClasses()
       return imported_classes
    end

# -------------------------------------------------------------------------------------------------
# ---------------- Objects (get, set, update) -----------------------------------------------------
# -------------------------------------------------------------------------------------------------

    method setObjects()
       objects := table()
       f := open(uri)
       while _line := read(f) do {
          if ReMatch("^[\ \t]*[a-zA-Z0-9_]+[\ \t]*:=[\ \t]*[a-zA-Z0-9_]+[(][a-zA-Z0-9_]*[)][\ \t]*$", _line) then {
             _line ? {
                tab(many(' \t'))
                objectName := tab(many(&digits ++ &letters ++ '-' ++ '_'))
                tab(many(' \t'))
                move(2)
                tab(many(' \t'))
                className := tab(upto("\("))
                if member(linked_classes, className) | member(imported_classes, className) | member(internal_classes, className) then {
                   objects[objectName] := className
                   }
                }
             }
          }
    end

    method getObjects()
       return objects
    end

# -------------------------------------------------------------------------------------------------
# ---------------- Database accessors -------------------------------------------------------------
# -------------------------------------------------------------------------------------------------


    method getDeclarativeExpressions()
       return lsp_database.declarative_expressions
    end

    method getBuiltInFunctions()
       return lsp_database.built_in_functions
    end

    method getActionWords()
       return lsp_database.action_words
    end

    method getSyntaxReservedWords()
       return lsp_database.syntax_reserved_words
    end

    method getKeywords()
       return lsp_database.keywords
    end

    method getPreprocessors()
       return lsp_database.preprocessors
    end

# -------------------------------------------------------------------------------------------------
# ---------------- Build object completion items --------------------------------------------------
# -------------------------------------------------------------------------------------------------

    method buildObjectCompletionItems(results_table, objectName)
        
       className := objects[objectName]

       if member(linked_classes, className) then {
          every class_method := key(linked_classes[className]["methods"]) do {
             put(results_table["items"], table("label", class_method, "kind", 2))
             }
          every class_attribute := !linked_classes[className]["attributes"] do {
             put(results_table["items"], table("label", class_attribute, "kind", 5))
             }
          }
       if member(imported_classes, className) then {
          every class_method := key(imported_classes[className]["methods"]) do {
             put(results_table["items"], table("label", class_method, "kind", 2))
             }
          every class_attribute := !imported_classes[className]["attributes"] do {
             put(results_table["items"], table("label", class_attribute, "kind", 5))
             }
          }
       if member(internal_classes, className) then {
          every class_method := key(internal_classes[className]["methods"]) do {
             put(results_table["items"], table("label", class_method, "kind", 2))
             }
          every class_attribute := !internal_classes[className]["attributes"] do {
             put(results_table["items"], table("label", class_attribute, "kind", 5))                
             }
          }
    end

# -------------------------------------------------------------------------------------------------
# ---------------- initially ----------------------------------------------------------------------
# -------------------------------------------------------------------------------------------------

    initially
        setFile()
        createTempFile()

end
